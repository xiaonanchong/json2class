/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package json2class;

import org.junit.Test;
import static org.junit.Assert.*;

public class LibraryTest {
    @Test public void testValidCase0() {
        Library classUnderTest = new Library();

	String json= "{\"body\":{\"things\":[{\"id\":\"zhanwan20200425\", \"thingType\":\"Gateway\", \"items\":[{\"qbad\":[\"property1\", \"property2\"], \"ts\":1588141630939, \"properties\":{\"property1\":\"100.0\", \"property2\":\"100.0\", \"property3\": \"100.0\"}}]}]}}";
	Message msg = classUnderTest.j2c(json);

        assertNotNull("someLibraryMethod should not return 'null' with valid input", msg);
	assertEquals(msg.things[0].id, "zhanwan20200425");
	assertEquals(msg.things[0].type, "Gateway");
	assertEquals(msg.things[0].record[0].bad[0], "property1");
	assertEquals(msg.things[0].record[0].bad[1], "property2");
	assertNotNull(msg.things[0].record[0].ts);
	Float x=100.0f;
	assertEquals(msg.things[0].record[0].properties.get("property1"), x);
	assertEquals(msg.things[0].record[0].properties.get("property2"), x);
	assertEquals(msg.things[0].record[0].properties.get("property3"), x);
    }

    @Test public void testInvalidCase0() {
	Library classUnderTest = new Library();
	String json = "{}";
	Message msg = classUnderTest.j2c(json);
	assertNull("someLibraryMethod should return 'null' with invalid input", msg);
    }

    @Test public void testInvalidCase1() {
	Library classUnderTest = new Library();
	String json = "{\"body\":{}}";
	Message msg = classUnderTest.j2c(json);
	assertNull("someLibraryMethod should return 'null' with invalid input", msg);
    }

    @Test public void testInvalidCase2() {
	Library classUnderTest = new Library();
	String json = "{\"body\":{\"things\":[]}}";
	Message msg = classUnderTest.j2c(json);
	assertNull("someLibraryMethod should return 'null' with invalid input", msg);
    }

    @Test public void testInvalidCase3() {
	Library classUnderTest = new Library();
	String json = "{\"body\":{\"things\":[{},{}]}}";
	Message msg = classUnderTest.j2c(json);
	assertNull("someLibraryMethod should return 'null' with invalid input", msg);
    }
}
